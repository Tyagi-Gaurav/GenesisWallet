plugins {
    id "org.springframework.boot" version "2.7.5"
    id 'jacoco'
    id "org.gradle.test-retry" version "1.4.1"
    id "org.sonarqube" version "3.4.0.2513"
}

bootJar {
    mainClass = 'com.gw.user.Application'
}

sourceSets {
    integration {
        java.srcDir "$projectDir/src/integration/java"
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testImplementation
}

dependencies {
    implementation project(":gw-grpc-schema")
    implementation project(":gw-grpc-common")
    implementation project(":gw-common")
    annotationProcessor project(":gw-common")
    implementation("org.springframework.boot:spring-boot-starter-actuator") {
        exclude group: "ch.qos.logback"
    }

    implementation "org.liquibase:liquibase-core:4.17.1"
    implementation "io.jsonwebtoken:jjwt-api:0.11.5"
    implementation "io.jsonwebtoken:jjwt-impl:0.11.5"
    implementation "io.jsonwebtoken:jjwt-jackson:0.11.5"
    implementation "org.springframework:spring-jdbc:5.3.23" //For liquibase to work
    implementation "org.springframework.boot:spring-boot-starter-data-r2dbc:2.7.5"
    implementation "org.springframework.vault:spring-vault-core:2.3.2"

    testImplementation project(":gw-test-common").sourceSets.test.output

}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath += sourceSets.integration.runtimeClasspath

    useJUnitPlatform()

    retry {
        maxRetries = 2
        maxFailures = 5
    }

    reports {
        html.enabled true
        junitXml.enabled = true
    }
    shouldRunAfter test
    finalizedBy jacocoTestReport
}

check.dependsOn(integrationTest)

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination layout.buildDirectory.dir('jacocoHtml').get().asFile
    }
    executionData.from = files('build/jacoco/test.exec','build/jacoco/integrationTest.exec')
}

sonarqube {
    properties {
        property "sonar.coverage.exclusions",
                        "**/com/gw/user/config/**, **/com/gw/user/security/WebSecurityConfig**, " +
                                "**/com/gw/user/Application**, **/com/gw/user/Graceful**," +
                                "**/com/gw/user/security/SecurityContextHolder**,**/com/gw/user/security/SecurityContextRepository**"
    }
}