plugins {
    id "org.springframework.boot" version "2.7.4"
    id 'jacoco'
    id "org.gradle.test-retry" version "1.4.0"
    id "org.sonarqube" version "3.4.0.2513"
}

bootJar {
    mainClass = 'com.gw.user.Application'
}

sourceSets {
    integration {
        java.srcDir "$projectDir/src/integration/java"
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testImplementation
}

dependencies {
    implementation project(":grpc-schema")
    implementation project(":grpc-common")
    implementation project(":common")
    implementation("org.springframework.boot:spring-boot-starter-actuator") {
        exclude group: "ch.qos.logback"
    }

    implementation "io.grpc:grpc-stub:1.49.2"
    implementation "io.grpc:grpc-protobuf:1.49.2"
    implementation "io.grpc:grpc-netty-shaded:1.50.2"
    implementation "org.liquibase:liquibase-core:4.17.0"
    implementation "io.jsonwebtoken:jjwt-api:0.11.5"
    implementation "io.jsonwebtoken:jjwt-impl:0.11.5"
    implementation "io.jsonwebtoken:jjwt-jackson:0.11.5"
    implementation "org.springframework:spring-jdbc:5.3.23" //For liquibase to work
    implementation "org.springframework.data:spring-data-r2dbc:1.5.5"
    implementation "org.springframework.boot:spring-boot-starter-data-r2dbc:2.7.4"
    implementation("io.r2dbc:r2dbc-postgresql:0.8.13.RELEASE") {
        exclude group: "io.projectreactor"
        exclude group: "io.projectreactor.netty"
    }
    implementation "com.mchange:c3p0:0.9.5.5"
    implementation "org.postgresql:postgresql:42.5.0"

    testImplementation project(":test-common").sourceSets.test.output
    testImplementation "io.grpc:grpc-testing:1.50.2"
    testImplementation "org.testcontainers:junit-jupiter:1.17.5"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.testcontainers:postgresql:1.17.5"
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath += sourceSets.integration.runtimeClasspath

    useJUnitPlatform()

    retry {
        maxRetries = 2
        maxFailures = 5
    }

    reports {
        html.enabled true
        junitXml.enabled = true
    }
    shouldRunAfter test
    finalizedBy jacocoTestReport
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination layout.buildDirectory.dir('jacocoHtml').get().asFile
    }
    executionData.from = files('build/jacoco/test.exec','build/jacoco/integrationTest.exec')
}

sonarqube {
    properties {
        property "sonar.coverage.exclusions",
                        "**/com/gw/user/config/**, **/com/gw/user/security/WebSecurityConfig**, " +
                                "**/com/gw/user/Application**, **/com/gw/user/Graceful**," +
                                "**/com/gw/user/security/SecurityContextHolder**,**/com/gw/user/security/SecurityContextRepository**"
    }
}